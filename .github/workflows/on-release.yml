name: on-release


on:
  release:
    types:
      - created


jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: true
      matrix:
        config:
          - name: "win32-x86"
            os: windows-2019
            arch: x86
          - name: "win32-amd64"
            os: windows-2019
            arch: AMD64

          - name: "macos-x84_64"
            os: macos-10.15
            arch: x86_64
          - name: "macos-universal2"
            os: macos-10.15
            arch: universal2

          - name: "linux-i386"
            os: ubuntu-20.04
            arch: i686
            platform: i386
          - name: "linux-x86_64"
            os: ubuntu-20.04
            arch: x86_64
            platform: x86_64
          - name: "linux-aarch64"
            os: ubuntu-20.04
            arch: aarch64
            platform: aarch64
          - name: "linux-ppc64le"
            os: ubuntu-20.04
            arch: ppc64le
            platform: ppc64le
          - name: "linux-s390x"
            os: ubuntu-20.04
            arch: s390x
            platform: s390x

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Set up QEMU
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.config.platform }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.2.2
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: ${{ matrix.config.arch }}
          CIBW_ENVIRONMENT: CIBW_MC_NAME=${{ matrix.config.name }}
          # CI env var isn't present in Linux since it's emulated
          CIBW_ENVIRONMENT_LINUX: CI=1 CIBW_MC_NAME=${{ matrix.config.name }}

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install pyproject.toml requirements
        shell: bash
        run: |
          python -m pip install toml
          python -c 'import toml; c = toml.load("pyproject.toml"); print("\n".join(c["build-system"]["requires"]))' \
            | python -m pip install -r /dev/stdin

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
